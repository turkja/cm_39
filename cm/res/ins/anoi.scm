(definstrument (anoi infile start dur (fftsize 128) (amp-scaler 1.0) rr)
  ;; a kind of noise reduction -- on-going average spectrum is squelched to some extent
  ;; obviously aimed at intermittent signal in background noise
  ;; this is based on Perry Cook's Scrubber.m
  (let ((r (or rr (* 2.0 pi)))
	(freq-inc (floor (/ fftsize 2)))
	(fdi (make-float-vector fftsize))
	(fdr (make-float-vector fftsize)))
    (let ((spectr (make-vector freq-inc 1.0))
	  (scales (make-float-vector freq-inc 1.0))
	  (diffs (make-float-vector freq-inc 0.0))
	  (win (make-fft-window blackman2-window fftsize))
	  (k 0)
	  (amp 0.0)
	  (incr (/ (* amp-scaler 4) *clm-srate*))
	  (beg (seconds->samples start))
	  (end (seconds->samples (+ start dur)))
	  (file (make-file->sample infile))
	  (radius (- 1.0 (/ r fftsize)))
	  (bin (/ *clm-srate* fftsize))
	  (fs (make-vector freq-inc))
	  (samp 0)
	  (fdrc 0.0))

      (do ((ctr 0 (+ ctr 1)))
	  ((= ctr freq-inc))
	(set! (fs ctr) (make-formant (* ctr bin) radius)))
      (set! fs (make-formant-bank fs scales))

      (set! (scales 0) 0.0)
      (do ((i beg (+ i 1)))
	  ((= i end))
	(let ((inval (file->sample file samp)))
	  (set! samp (+ samp 1))
	  (set! (fdr k) inval)
	  (set! k (+ k 1))
	  (if (< amp amp-scaler) (set! amp (+ amp incr)))
	  (if (>= k fftsize)
	      (begin
		(set! k 0)
		(spectrum fdr fdi win 1)
		(do ((ctr 0 (+ ctr 1)))
		    ((= ctr freq-inc))
		  (set! fdrc (fdr ctr))
		  (set! (spectr ctr) (+ (* .9 (spectr ctr)) (* .1 fdrc)))
		  (if (>= (spectr ctr) fdrc) 
		      (set! (diffs ctr) (/ (scales ctr) (- fftsize)))
		      (set! (diffs ctr)
			    (/ (- (/ (- fdrc (spectr ctr)) fdrc)
				  (scales ctr))
			       fftsize))))))
	  (outa i (* amp (formant-bank fs inval)))
	  (float-vector-add! scales diffs))))))

